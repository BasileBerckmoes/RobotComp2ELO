<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnEntireDescriptorTransferPerTrigger" xml:space="preserve">
    <value>An entire descriptor transfer per trigger</value>
  </data>
  <data name="BasicTabDisplayName" xml:space="preserve">
    <value>Basic</value>
  </data>
  <data name="BuiltInTabDisplayName" xml:space="preserve">
    <value>Built-in</value>
  </data>
  <data name="Byte" xml:space="preserve">
    <value>Byte</value>
  </data>
  <data name="ByteToByte" xml:space="preserve">
    <value>Byte to Byte</value>
  </data>
  <data name="ByteToWord" xml:space="preserve">
    <value>Byte to Word</value>
  </data>
  <data name="DescriptorsTabDisplayName" xml:space="preserve">
    <value>Descriptors</value>
  </data>
  <data name="DeserializationErrorFmt" xml:space="preserve">
    <value>Error during serialization {0}: {1}</value>
  </data>
  <data name="DeserializationFailed" xml:space="preserve">
    <value>The DMA settings have incorrect values. You must redefine them for proper DMA operation.</value>
  </data>
  <data name="EntireDescriptorChainPerTrigger" xml:space="preserve">
    <value>Entire descriptor chain per trigger</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value />
  </data>
  <data name="ErrorDescriptorName" xml:space="preserve">
    <value>Descriptor name must be unique.</value>
  </data>
  <data name="ErrorDestinationTransferWidth" xml:space="preserve">
    <value>If "Data Element Size" is {0} then Source and "Destination Transfer Width" can be only {1}.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="ErrorIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAALjSURBVDhPVZFbSFRRFIbXOXM7mY444WCpIRFeMjEJUUnzkoIiGj1YoQhqLyHig4mJdDVBErMH
        E0NKUMMeetBEwgRLzTGysFQCxUs6FkJDVqMzqTOz/5ajQi34OXD2+v79r7Xp33JkZOgdSUklzuTkt66i
        ot+isHDTmZIyux5xvHn22LHwyYgIabf1/7LFxJx0RkdPieJigYYGoLkZqKsDysqAnBzYoqJsXUbjzbbA
        QGUX2am10NAwZ9SJZeTnQ1RUCJSWugGkpwNZWRDZ2RCnT8MSEuIs9/C4X6nX7xisHg5U/w4I6BMJCbDk
        5uJlTY2whoVh3csLvzw8YPX1RU9BAeYyM2E9ehTvfH03ElWqwmuKItE3g0/sj6AgpysyEmONjbBarWK0
        qQnz+/djQZbRxYbmpSXMDA/ja1AQxg0GXNHpPqap1X40rdfXmP38sBYQgO/BwVjo7xd2ux0THR0YqarC
        ysoKHKurWOLYM5xmlNM8UpQNA9E5GvP07Jz09sYia15RMGU0ii8DA3A4HNja2oKd4en4eIyrVPig02FA
        q0WHViv2Ed2mAUV5+oahT6wJjQbvVSoxWl3thl0uF5YHBzHCxiYeYYgNevjbwj28sXv0QqOp7VWrMcQy
        sWtnXp7YjrppsWBtZgbbIwy3tKDP0xO9koQnrDuy7NIQ1dIzlZzcyU7d7NiRl4dls1ls8oxjHPWVvz/m
        Xr+GzWbDK373Tp73AcMXJcnOD3WJHsqyplmWTa2SJLrS0sSvxUUxHBcnnhOJ7m3xDswmk/hUVycauecW
        //Mn+nyQKMT91hVq9am7kvTzAR+0GwyijQjtu3rMavXxwT2+8QafJxJZZaKqMCK1Gy7XaKRUWb5QRWSp
        5YZ6Bu6zGlh3WdWsih1wjcGWQ0RGN7hX5yVJiiRKSCXqKyZav8rNlawSItdZoj8MTDN4neP+D/5bsUR6
        H6IzWo6mI6rnbHw5XT5AFH6EiJe8V0R/ARNefmpjLNQjAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="ErrorProviderIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAJPSURBVDhPpZJfSJNRGMY/RctYUHTRvxV2Ecjyz0WwmktljKnZqjVRSyr/ZjEcaUK5IVikaZZd
        5UgZRI7AihoGq12kF5XVRYQSQqFepPMmYlFBbPv8vvN03p3cCrvrhY9zLr7fed/3eR7pzwqNj2K6twVv
        nYfwqsGCF7VmPG8qw5tLzZgNPsLv31bWzK0uTDVbsejrx3ePC/KVWshuG8JtVnxoOYinFQZM9LlXPkDg
        tLMM3x4MgN3tARtqB7vWCNZhB3MWgdXlYKE6F/6SXRjrvpB8gEadcnDw/k2wx4NgI/1g4/egqmr8Y3cu
        g9XnQinXYtaqxW1zNt75R8QDtOPiMAeoI4G+XqjvJxKw+joAVpONJftWxMwZCJq08J2uFjCJQzvGR/V2
        gA3y+8vRJBwchno8C/LhjYiYVmHSqEGXMU/ApCqJw/pOgd04A3a9Ccw/kIDZkAtK1Q7I+9cjUpiCeUMq
        WnXbBUx2yO1HhDidFeLsPpmAFWcBZNsmRC1r8MMoYU6fgsbMzQImH8PnDghVz5r4WQjmMPApHFB76uO7
        yqVrESmQ8NkgYWx3Oup2ZgqYAvCR+0iikCWsJgfq1YZEZ9llQ7QoFeF8CSG9BI8uA+dLiwVMyQmU6+M+
        KvZtUGxbsNRZmYBjF4/hKx83tEfCk7w0VG7QwO/1CpiKkvPQkoU57iPZETWlI9ZWgp+txfiyV8IC7xjg
        4Il1aXBXHU2Cy0XJoQCQj5P7NPjEVZ3h4jzjO3p0q+Md/wkuFyWHAkA+kh2kKolDO/416v+XJP0CHyTG
        12BieEAAAAAASUVORK5CYII=
</value>
  </data>
  <data name="Halfword" xml:space="preserve">
    <value>Halfword (2 bytes)</value>
  </data>
  <data name="HalfwordToHalfword" xml:space="preserve">
    <value>Halfword to Halfword</value>
  </data>
  <data name="HalfwordToWord" xml:space="preserve">
    <value>Halfword to Word</value>
  </data>
  <data name="LabelTextChannelPriority" xml:space="preserve">
    <value>Channel priority:</value>
  </data>
  <data name="LabelTextNumberOfDescriptors" xml:space="preserve">
    <value>Number of descriptors:</value>
  </data>
  <data name="LabelTextPreemptable" xml:space="preserve">
    <value>Preemptable:</value>
  </data>
  <data name="LabelTextTriggerInput" xml:space="preserve">
    <value>Trigger input:</value>
  </data>
  <data name="OneTransferPerTrigger" xml:space="preserve">
    <value>One transfer per trigger</value>
  </data>
  <data name="OneXLoopTransferPerTrigger" xml:space="preserve">
    <value>One X loop transfer per trigger</value>
  </data>
  <data name="RangeErrorFmt" xml:space="preserve">
    <value>Value of {0} parameter should be between {1} and {2}</value>
  </data>
  <data name="RetriggerAfter16SysclkCycles" xml:space="preserve">
    <value>Retrigger after 16 SYSCLK cycles</value>
  </data>
  <data name="RetriggerAfter4Sysclkcycles" xml:space="preserve">
    <value>Retrigger after 4 SYSCLK cycles</value>
  </data>
  <data name="RetriggerImmediately" xml:space="preserve">
    <value>Retrigger immediately (pulse trigger)</value>
  </data>
  <data name="TriggerOnCompletionOfEntireDescriptorChain" xml:space="preserve">
    <value>Trigger on completion of entire descriptor chain</value>
  </data>
  <data name="TriggerOnDescriptorCompletion" xml:space="preserve">
    <value>Trigger on descriptor completion</value>
  </data>
  <data name="TriggerOnEveryElementTransferCompletion" xml:space="preserve">
    <value>Trigger on every element transfer completion</value>
  </data>
  <data name="TriggerOnEveryXLoopTransferCompletion" xml:space="preserve">
    <value>Trigger on every X loop transfer completion</value>
  </data>
  <data name="WaitForTriggerReactivation" xml:space="preserve">
    <value>Wait for trigger reactivation</value>
  </data>
  <data name="Word" xml:space="preserve">
    <value>Word (4 bytes)</value>
  </data>
  <data name="WordToByte" xml:space="preserve">
    <value>Word to Byte</value>
  </data>
  <data name="WordToHalfword" xml:space="preserve">
    <value>Word to Halfword</value>
  </data>
  <data name="WordToWord" xml:space="preserve">
    <value>Word to Word</value>
  </data>
</root>